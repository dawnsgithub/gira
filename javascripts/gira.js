var LABEL_REGEX=/^\d+-(\w+)/;mynunjucks=new nunjucks.Environment,mynunjucks.addFilter("removeIndex",function(a){var b=LABEL_REGEX.exec(a);return b&&b.pop()||a}),mynunjucks.addFilter("dayFromNow",function(a){return Math.floor((new Date(a)-new Date)/864e5)}),mynunjucks.addFilter("hasIndex",function(a){return/\d+-.*/.test(a)}),github=new Github("jcouyang","gira");var View=function(a){_.extend(this,a),this.initialize.apply(this,arguments)},delegateEventSplitter=/^(\S+)\s*(.*)$/;View.extend=function(a){var b,c=this;b=a&&_.has(a,"constructor")?a.constructor:function(){return c.apply(this,arguments)},_.extend(b,c);var d=function(){this.constructor=b};return d.prototype=c.prototype,b.prototype=new d,_.extend(b.prototype,a),b.__super__=c.prototype,b},_.extend(View.prototype,{el:$("body"),templateName:"index.html",templateEngine:mynunjucks,modelReady:function(){return Q()},initialize:function(){this.render()},render:function(){var a=this;this.modelReady().then(function(b){console.log(b),$(a.el).html(a.templateEngine.render(a.templateName,b)),a.delegateEvents(),a.afterRender.call(a)}).catch(function(b){console.log("error",b),"string"==typeof b&&(b=JSON.parse(b.responseText||b)),$(a.el).html(a.templateEngine.render(a.templateName))})},afterRender:function(){},delegateEvents:function(){var a=this,b=_.result(this,"events");return b?void _.each(_(b).keys(),function(c){var d=c.match(delegateEventSplitter),e=d[1],f=d[2];""==f?$(a.el).on(e,_.bind(a[b[c]],a)):$(a.el).find(f).on(e,_.bind(a[b[c]],a))}):this}});var HeaderView=View.extend({el:"#header",templateName:"src/templates/header.html",modelReady:function(){return github.getUser()},events:{"click .octicon.octicon-log-out":"logout"},logout:function(){github.logout()}}),KanbanView=View.extend({el:"#contributions-calendar",templateName:"src/templates/gira.html",modelReady:function(){var a=this;return Q.all([github.getIssues(),github.getLabels()]).then(function(b){var c=b[0],d=_(b[1]).filter(function(a){return LABEL_REGEX.test(a.name)}),e=_(c).groupBy(function(a){var b=_(a.labels).find(function(a){return LABEL_REGEX.test(a.name)});return b?b.name:"0-Backlog"});return c=_.chain(d.concat({name:"0-Backlog"})).sortBy(function(a){return a.name}).uniq(!0,function(a){return a.name}).tap(function(b){a.last_label=b[b.length-1].name}).map(function(a){return[a.name,e[a.name]]}).value(),{issuesWithLabel:c,last_label:a.last_label}})},events:{"click a[rel=facebox]":"renderFaceBox","click .close.close-issue":"closeIssue","dragstart .contrib-details.grid .col .lbl div[draggable=true]":"dragStart","dragover .col":"dragover","drop .col":"drop","click .remove-lane":"removeLane"},removeLane:function(a){a.preventDefault();var b=$(a.currentTarget).attr("data");github.deleteLane(b)},drop:function(a){a.stopPropagation();var b=a.currentTarget,c=$("#"+a.originalEvent.dataTransfer.getData("text/plain"));return github.deleteLabel(c.attr("id"),c.data("label")).then(function(a){github.addLabel(c.attr("id"),_(a).pluck("name").concat(b.id))}),$(a.currentTarget).removeClass("over").find("span.lbl").append($(c)),!1},dragStart:function(a){a.originalEvent.dataTransfer.effectAllowed="move",a.originalEvent.dataTransfer.setData("text/plain",a.currentTarget.id),console.log("transfet",a.currentTarget)},dragover:function(a){return a.preventDefault&&a.preventDefault(),$(a.currentTarget).removeClass("over").addClass("over"),a.originalEvent.dataTransfer.dropEffect="move",!1},renderFaceBox:function(a){new EditIssueView({edit:!0,issue_id:a.currentTarget.dataset.issueId}),console.log("render popup",a.currentTarget.dataset.issueId)},closeIssue:function(a){var b=$(a.currentTarget);github.getIssues(b.data("issue")).then(function(a){a.state="close",a.assignee=a.assignee&&a.assignee.login,a.milestone=a.milestone&&a.milestone.number,github.newIssue(a,a.number).then(function(){$("#"+b.data("issue")).remove()})})}}),RepoSelectorView=View.extend({repo:"gira",owner:"jcouyang",el:".pagehead.repohead h1",templateName:"src/templates/repo-selector.html",changeOwner:function(a){this.owner=$(a.currentTarget).attr("name"),this.repo="",this.render()},changeRepo:function(a){this.repo=$(a.currentTarget).attr("name"),github.owner=this.owner,github.repo=this.repo,this.render()},afterRender:function(){var a=$(this.el).find(".select-menu.owner-select-menu .selected input[type=radio]"),b=$(this.el).find(".target-repo-menu.select-menu .selected input[type=radio]");github.owner=a&&a.attr("name")||this.owner,github.repo=b&&b.attr("name")||this.repo,github.milestone="",milestone.render(),kanban&&kanban.render()||(kanban=new KanbanView)},events:{"change .select-menu.owner-select-menu input[type=radio]":"changeOwner","change .target-repo-menu.select-menu input[type=radio]":"changeRepo"},modelReady:function(){var a=this;return github.access_token?github.getRepos().then(function(b){var c=_(b).groupBy(function(a){return a.owner.login});return a.repo=a.repo||c[a.owner][0].name,{checked:a.owner,checkedRepo:a.repo,owners:_(c).map(function(a){return a[0].owner}),repos:c[a.owner]}}):Q({username:this.owner,repo:this.repo})}}),MilestoneView=View.extend({milestone:"1.0.0",el:".pagehead.repohead div.sidebar-milestone-widget",templateName:"src/templates/milestones.html",events:{"click .select-menu a.select-menu-item":"changeMilestone"},changeMilestone:function(a){a.stopPropagation(),this.milestone=$(a.currentTarget).data("milestone"),github.milestone=this.milestone,this.render(),kanban&&kanban.render()||(kanban=new KanbanView)},modelReady:function(){var a=this;return github.getMilestones().then(function(b){return{selected:a.milestone&&_(b).find(function(b){return b.number===a.milestone}),milestones:b}})}}),EditIssueView=View.extend({edit:!0,issue_id:"",el:".facebox-content",templateName:"src/templates/edit-issue.html",events:{"submit form:visible":"createIssue","click #jk-preview":"preview","click .color-label":"addLabels","change input[type=file]":"uploadImage"},uploadImage:function(a){var b=a.currentTarget.files[0],c={};c.path="images/"+b.name.replace(" ","-"),c.message="upload"+b.name;var d=new FileReader;d.onloadend=function(){c.content=d.result,c.branch="gira-images",c.content=c.content.slice(c.content.indexOf(",")+1),github.getRefSha().then(function(a){var b=_(a);return b.find(function(a){return"refs/heads/gira-images"===a.ref})?github.uploadImage(c):github.createBranch("refs/heads/gira-images",b.first().object.sha).then(function(){github.uploadImage(c)})}).then(function(a){var b=$("#issue_body")[0].selectionStart,c=$("#issue_body")[0].selectionEnd;$("#issue_body").val($("#issue_body").val()+"![]("+a.content.html_url+"?raw=true)"),$("#issue_body")[0].selectionStart=b,$("#issue_body")[0].selectionEnd=c},function(a){console.log("exist",a)})},b?d.readAsDataURL(b):c.content=""},addLabels:function(a){a.preventDefault(),$(a.currentTarget).toggleClass("selected")},preview:function(){var a={text:$("#issue_body").val()};github.markdown(a).then(function(a){$(".comment-body.markdown-body.js-comment-body p").html(a)})},modelReady:function(){var a=[this.edit&&github.getIssues(null,this.issue_id),github.getAssignees(),github.getMilestones(),this.edit&&github.getLabels()];return Q.all(a).then(function(a){console.log(a);var b=a[0];return b.assignees=a[1],b.milestones=a[2],b.all_labels=a[3],b.comments=a[4],b})},createIssue:function(){var a=this,b=$("form:visible");return github.newIssue({title:b.find("input[name='issue[title]']").val(),body:b.find("textarea[name='issue[body]']").val(),assignee:b.find(".assignee input[type=radio]:checked").val(),milestone:b.find(".milestone input[type=radio]:checked").val(),labels:b.find("a.selected input").get().map(function(a){return a.value})},b.data("issue-id")).then(function(){a.render(),$(".facebox-close").click(),kanban&&kanban.render()||(kanban=new KanbanView)}),!1},afterRender:function(){this.edit&&$("#jk-preview").click()}}),LabelView=View.extend({el:".facebox-content",templateName:"src/templates/create-label.html",events:{"submit #new_label_form":"submit"},submit:function(a){a.preventDefault();var b=$(a.currentTarget),c=$(".col").last().attr("id");return github.createLabel({color:b.find("input[name=color]").val().replace("#",""),name:parseInt(/^(\d+)-\w+/.exec(c).pop())+1+"-"+b.find("input[name=label]").val()}).then(function(){kanban&&kanban.render()||(kanban=new KanbanView),$(".facebox-close").click()}),!1}}),ErrorView=View.extend({message:"",el:".notification",templateName:"src/templates/error.html",modelReady:function(){return Q({message:this.message})},afterRender:function(){window.setTimeout(function(){$(".notification .close.js-flash-close").click()},2e3)}});